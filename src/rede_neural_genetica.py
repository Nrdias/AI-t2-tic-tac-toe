#!/usr/bin/env python3
"""
Rede Neural MLP integrada com Algoritmo Gen√©tico para Jogo da Velha

Implementa√ß√£o seguindo as especifica√ß√µes:
- Cada linha da popula√ß√£o representa um indiv√≠duo
- Colunas 0-179: 180 pesos da rede neural
- Coluna 180: fun√ß√£o aptid√£o
- Popula√ß√£o inicial com valores aleat√≥rios entre -1 e 1

Estrutura dos pesos (180 par√¢metros por indiv√≠duo):
- W1 (9√ó9): 81 pesos da entrada para camada oculta
- b1 (9):   9 bias da camada oculta  
- W2 (9√ó9): 81 pesos da camada oculta para sa√≠da
- b2 (9):   9 bias da camada de sa√≠da

Author: Baseado nas especifica√ß√µes fornecidas
Date: 2025
"""

import numpy as np
from typing import List, Tuple, Optional


class RedeNeural:
    """
    Rede Neural MLP de 2 camadas para o jogo da velha.
    
    Arquitetura: 9 ‚Üí 9 ‚Üí 9
    - Entrada: 9 posi√ß√µes do tabuleiro
    - Camada oculta: 9 neur√¥nios (tanh)
    - Camada sa√≠da: 9 neur√¥nios (linear)
    """
    
    def __init__(self, pesos: np.ndarray):
        """
        Inicializa a rede neural com pesos espec√≠ficos.
        
        Args:
            pesos: Array com 180 pesos [W1, b1, W2, b2]
        """
        assert len(pesos) == 180, f"Esperado 180 pesos, recebido {len(pesos)}"
        self._extrair_pesos(pesos)
    
    def _extrair_pesos(self, pesos: np.ndarray):
        """
        Extrai os pesos do vetor plano e os organiza nas matrizes.
        
        Layout dos pesos:
        - pesos[0:81]    ‚Üí W1 (9√ó9)
        - pesos[81:90]   ‚Üí b1 (9)  
        - pesos[90:171]  ‚Üí W2 (9√ó9)
        - pesos[171:180] ‚Üí b2 (9)
        """
        # Pontos de corte para extrair os pesos
        w1_fim = 81
        b1_fim = w1_fim + 9      # 90
        w2_fim = b1_fim + 81     # 171
        
        # Extrair e reformatar os pesos
        self.W1 = pesos[:w1_fim].reshape(9, 9)
        self.b1 = pesos[w1_fim:b1_fim]
        self.W2 = pesos[b1_fim:w2_fim].reshape(9, 9)
        self.b2 = pesos[w2_fim:]
        
        # Verificar dimens√µes
        assert self.W1.shape == (9, 9), f"W1 deve ser 9√ó9, obtido {self.W1.shape}"
        assert self.b1.shape == (9,), f"b1 deve ser (9,), obtido {self.b1.shape}"
        assert self.W2.shape == (9, 9), f"W2 deve ser 9√ó9, obtido {self.W2.shape}"
        assert self.b2.shape == (9,), f"b2 deve ser (9,), obtido {self.b2.shape}"
    
    def propagacao(self, entrada: np.ndarray) -> np.ndarray:
        """
        Executa a propaga√ß√£o forward na rede.
        
        Args:
            entrada: Array com 9 elementos representando o tabuleiro
                    (valores: -1=O, 0=vazio, 1=X)
        
        Returns:
            saida: Array com 9 elementos (scores para cada posi√ß√£o)
        """
        assert len(entrada) == 9, f"Entrada deve ter 9 elementos, recebido {len(entrada)}"
        
        # Camada 1: Entrada ‚Üí Oculta
        z1 = entrada @ self.W1 + self.b1  # Produto matricial + bias
        h1 = np.tanh(z1)                  # Ativa√ß√£o tanh
        
        # Camada 2: Oculta ‚Üí Sa√≠da  
        z2 = h1 @ self.W2 + self.b2      # Produto matricial + bias
        saida = z2                        # Ativa√ß√£o linear (identidade)
        
        return saida
    
    def escolher_jogada(self, tabuleiro: np.ndarray) -> int:
        """
        Escolhe a melhor jogada baseada na sa√≠da da rede.
        
        Args:
            tabuleiro: Array com 9 elementos representando o estado do tabuleiro
        
        Returns:
            posicao: √çndice da posi√ß√£o escolhida (0-8)
        """
        # Propaga√ß√£o para obter scores
        scores = self.propagacao(tabuleiro)
        
        # Mascarar posi√ß√µes ocupadas com -infinito
        scores_mascarados = np.where(tabuleiro == 0, scores, -np.inf)
        
        # Verificar se h√° jogadas v√°lidas
        if np.all(np.isneginf(scores_mascarados)):
            # Fallback: escolher posi√ß√£o vazia aleat√≥ria
            posicoes_livres = [i for i, val in enumerate(tabuleiro) if val == 0]
            if posicoes_livres:
                return np.random.choice(posicoes_livres)
            else:
                return 0  # √öltimo recurso
        
        # Retornar posi√ß√£o com maior score
        return int(np.argmax(scores_mascarados))


class PopulacaoGenetica:
    """
    Classe para gerenciar a popula√ß√£o do algoritmo gen√©tico.
    
    Cada linha da matriz representa um indiv√≠duo:
    - Colunas 0-179: 180 pesos da rede neural
    - Coluna 180: fun√ß√£o aptid√£o
    """
    
    def __init__(self, tamanho_populacao: int = 50):
        """
        Inicializa a popula√ß√£o gen√©tica.
        
        Args:
            tamanho_populacao: N√∫mero de indiv√≠duos na popula√ß√£o
        """
        self.tamanho_populacao = tamanho_populacao
        self.num_pesos = 180
        self.num_colunas = 181  # 180 pesos + 1 aptid√£o
        
        # Inicializar popula√ß√£o com valores aleat√≥rios
        self.populacao = self._criar_populacao_inicial()
    
    def _criar_populacao_inicial(self) -> np.ndarray:
        """
        Cria popula√ß√£o inicial com pesos aleat√≥rios entre -1 e 1.
        
        Returns:
            populacao: Matriz (tamanho_populacao √ó 181)
        """
        # Criar matriz da popula√ß√£o
        populacao = np.zeros((self.tamanho_populacao, self.num_colunas))
        
        # Preencher colunas 0-179 com pesos aleat√≥rios entre -1 e 1
        populacao[:, :self.num_pesos] = np.random.uniform(
            low=-1.0, 
            high=1.0, 
            size=(self.tamanho_populacao, self.num_pesos)
        )
        
        # Inicializar aptid√£o com valores altos (n√£o avaliados ainda)
        populacao[:, self.num_pesos] = np.inf
        
        return populacao
    
    def obter_individuo(self, indice: int) -> np.ndarray:
        """
        Obt√©m um indiv√≠duo espec√≠fico da popula√ß√£o.
        
        Args:
            indice: √çndice do indiv√≠duo (0 a tamanho_populacao-1)
        
        Returns:
            individuo: Array com 181 elementos (180 pesos + 1 aptid√£o)
        """
        assert 0 <= indice < self.tamanho_populacao, f"√çndice {indice} fora do intervalo"
        return self.populacao[indice].copy()
    
    def obter_pesos_individuo(self, indice: int) -> np.ndarray:
        """
        Obt√©m apenas os pesos de um indiv√≠duo (sem a aptid√£o).
        
        Args:
            indice: √çndice do indiv√≠duo
        
        Returns:
            pesos: Array com 180 pesos
        """
        return self.populacao[indice, :self.num_pesos].copy()
    
    def obter_aptidao_individuo(self, indice: int) -> float:
        """
        Obt√©m a aptid√£o de um indiv√≠duo espec√≠fico.
        
        Args:
            indice: √çndice do indiv√≠duo
        
        Returns:
            aptidao: Valor da aptid√£o
        """
        return self.populacao[indice, self.num_pesos]
    
    def definir_aptidao_individuo(self, indice: int, aptidao: float):
        """
        Define a aptid√£o de um indiv√≠duo espec√≠fico.
        
        Args:
            indice: √çndice do indiv√≠duo
            aptidao: Valor da aptid√£o
        """
        self.populacao[indice, self.num_pesos] = aptidao
    
    def criar_rede_neural(self, indice: int) -> RedeNeural:
        """
        Cria uma rede neural com os pesos de um indiv√≠duo espec√≠fico.
        
        Args:
            indice: √çndice do indiv√≠duo
        
        Returns:
            rede: Inst√¢ncia da RedeNeural
        """
        pesos = self.obter_pesos_individuo(indice)
        return RedeNeural(pesos)
    
    def imprimir_estatisticas(self):
        """Imprime estat√≠sticas da popula√ß√£o."""
        print("üìä ESTAT√çSTICAS DA POPULA√á√ÉO GEN√âTICA")
        print("=" * 60)
        print(f"Tamanho da popula√ß√£o: {self.tamanho_populacao}")
        print(f"N√∫mero de pesos por indiv√≠duo: {self.num_pesos}")
        print(f"Colunas totais por indiv√≠duo: {self.num_colunas}")
        
        # Estat√≠sticas dos pesos
        todos_pesos = self.populacao[:, :self.num_pesos]
        print(f"\nüß¨ ESTAT√çSTICAS DOS PESOS:")
        print(f"   M√≠nimo: {todos_pesos.min():.4f}")
        print(f"   M√°ximo: {todos_pesos.max():.4f}")
        print(f"   M√©dia: {todos_pesos.mean():.4f}")
        print(f"   Desvio padr√£o: {todos_pesos.std():.4f}")
        
        # Estat√≠sticas das aptid√µes
        aptidoes = self.populacao[:, self.num_pesos]
        aptidoes_validas = aptidoes[aptidoes != np.inf]
        
        print(f"\nüéØ ESTAT√çSTICAS DAS APTID√ïES:")
        if len(aptidoes_validas) > 0:
            print(f"   Melhor aptid√£o: {aptidoes_validas.min():.4f}")
            print(f"   Pior aptid√£o: {aptidoes_validas.max():.4f}")
            print(f"   Aptid√£o m√©dia: {aptidoes_validas.mean():.4f}")
            print(f"   Indiv√≠duos avaliados: {len(aptidoes_validas)}/{self.tamanho_populacao}")
        else:
            print("   Nenhum indiv√≠duo avaliado ainda")
        
        print("=" * 60)
    
    def imprimir_individuo(self, indice: int, precisao: int = 3):
        """
        Imprime detalhes de um indiv√≠duo espec√≠fico.
        
        Args:
            indice: √çndice do indiv√≠duo
            precisao: N√∫mero de casas decimais
        """
        assert 0 <= indice < self.tamanho_populacao, f"√çndice {indice} fora do intervalo"
        
        pesos = self.obter_pesos_individuo(indice)
        aptidao = self.obter_aptidao_individuo(indice)
        
        print(f"\nüß† INDIV√çDUO #{indice + 1}")
        print("=" * 40)
        print(f"Aptid√£o: {aptidao:.4f}")
        
        # Mostrar alguns pesos como exemplo
        print(f"Primeiros 10 pesos: {pesos[:10]}")
        print(f"√öltimos 10 pesos: {pesos[-10:]}")
        
        # Estat√≠sticas dos pesos deste indiv√≠duo
        print(f"Range dos pesos: [{pesos.min():.{precisao}f}, {pesos.max():.{precisao}f}]")
        print(f"M√©dia dos pesos: {pesos.mean():.{precisao}f}")
        print("=" * 40)


def exemplo_uso():
    """Demonstra o uso da popula√ß√£o gen√©tica com redes neurais."""
    print("üß¨ EXEMPLO DE POPULA√á√ÉO GEN√âTICA + REDE NEURAL")
    print("=" * 70)
    
    # Criar popula√ß√£o
    populacao = PopulacaoGenetica(tamanho_populacao=5)
    populacao.imprimir_estatisticas()
    
    # Mostrar alguns indiv√≠duos
    print(f"\nüìã DETALHES DOS PRIMEIROS 3 INDIV√çDUOS:")
    for i in range(3):
        populacao.imprimir_individuo(i)
    
    # Testar uma rede neural com o primeiro indiv√≠duo
    print(f"\nüéÆ TESTE COM REDE NEURAL DO INDIV√çDUO #1:")
    rede = populacao.criar_rede_neural(0)
    
    # Tabuleiro de exemplo
    tabuleiro = np.array([1, 0, -1, 0, 1, 0, 0, -1, 0])
    
    print(f"Tabuleiro: {tabuleiro}")
    scores = rede.propagacao(tabuleiro)
    jogada = rede.escolher_jogada(tabuleiro)
    
    print(f"Scores: {scores}")
    print(f"Jogada escolhida: posi√ß√£o {jogada}")
    
    # Simular aptid√£o
    print(f"\nüìà SIMULANDO AVALIA√á√ÉO DE APTID√ÉO:")
    for i in range(populacao.tamanho_populacao):
        # Simular aptid√£o aleat√≥ria (normalmente seria resultado de jogos)
        aptidao_simulada = np.random.uniform(0, 2)
        populacao.definir_aptidao_individuo(i, aptidao_simulada)
    
    # Mostrar estat√≠sticas ap√≥s avalia√ß√£o
    print(f"\nüìä AP√ìS AVALIA√á√ÉO DE APTID√ÉO:")
    populacao.imprimir_estatisticas()


if __name__ == "__main__":
    exemplo_uso() 