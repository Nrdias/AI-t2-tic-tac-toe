#!/usr/bin/env python3
"""
Exemplo espec√≠fico da matriz de popula√ß√£o do algoritmo gen√©tico
conforme mostrado na imagem.

Estrutura da matriz:
- Cada linha = 1 indiv√≠duo 
- Colunas 0...179 = 180 pesos da rede neural
- Coluna 180 = fun√ß√£o aptid√£o
- Valores aleat√≥rios entre -1 e 1 para os pesos

Author: Baseado na imagem fornecida
Date: 2025
"""

import numpy as np
from rede_neural_genetica import PopulacaoGenetica, RedeNeural


def mostrar_estrutura_matriz():
    """Mostra a estrutura da matriz exatamente como na imagem."""
    print("üß¨ ESTRUTURA DA MATRIZ DA POPULA√á√ÉO")
    print("=" * 70)
    
    # Criar popula√ß√£o pequena para demonstra√ß√£o
    populacao = PopulacaoGenetica(tamanho_populacao=3)
    matriz = populacao.populacao
    
    print("Dimens√µes da matriz:", matriz.shape)
    print("Linhas (indiv√≠duos):", matriz.shape[0])
    print("Colunas (pesos + aptid√£o):", matriz.shape[1])
    
    print("\nüìã ESTRUTURA DAS COLUNAS:")
    print("  Colunas 0...179  ‚Üí 180 pesos da rede neural")
    print("  Coluna 180       ‚Üí fun√ß√£o aptid√£o")
    
    print(f"\nüî¢ PRIMEIROS VALORES DE CADA INDIV√çDUO:")
    for i in range(populacao.tamanho_populacao):
        print(f"\n  Indiv√≠duo {i}:")
        # Mostrar primeiros pesos (como na imagem: -0.1, -0.008, -0.5, 0.0625, ...)  
        primeiros_pesos = matriz[i, :10]
        aptidao = matriz[i, 180]
        
        print(f"    Primeiros 10 pesos: [{', '.join([f'{p:.3f}' for p in primeiros_pesos])}]")
        print(f"    Aptid√£o (coluna 180): {aptidao}")
    
    return matriz


def demonstrar_exemplo_imagem():
    """Cria um exemplo que mostra valores similares aos da imagem."""
    print("\n" + "=" * 70)
    print("üñºÔ∏è  EXEMPLO SIMULANDO OS VALORES DA IMAGEM")
    print("=" * 70)
    
    # Criar uma popula√ß√£o pequena
    populacao = PopulacaoGenetica(tamanho_populacao=2)
    
    # Simular alguns valores espec√≠ficos como na imagem
    # Indiv√≠duo 1: come√ßando com -0.1, -0.008, -0.5, 0.0625, ...
    exemplo_pesos_1 = np.array([-0.1, -0.008, -0.5, 0.0625] + 
                              [np.random.uniform(-1, 1) for _ in range(176)])
    populacao.populacao[0, :180] = exemplo_pesos_1
    populacao.definir_aptidao_individuo(0, 0.85)  # Aptid√£o exemplo
    
    # Mostrar formata√ß√£o similar √† imagem
    print("popula√ß√£o")
    print("‚îå" + "‚îÄ" * 50 + "‚î¨" + "‚îÄ" * 5 + "‚îê")
    print("‚îÇ" + " " * 18 + "0 ‚Ä¶ 179" + " " * 18 + "‚îÇ 180 ‚îÇ")
    print("‚îú" + "‚îÄ" * 50 + "‚îº" + "‚îÄ" * 5 + "‚î§")
    
    # Primeira linha (como na imagem)
    pesos_str = " | ".join([f"{p:.3f}" for p in exemplo_pesos_1[:4]]) + " | ‚Ä¶"
    aptidao_str = f"{populacao.obter_aptidao_individuo(0):.2f}"
    print(f"‚îÇ {pesos_str:<48} ‚îÇ{aptidao_str:>4} ‚îÇ")
    
    # Segunda linha  
    individuo_2 = populacao.obter_pesos_individuo(1)
    pesos_str_2 = " | ".join([f"{p:.3f}" for p in individuo_2[:4]]) + " | ‚Ä¶"
    populacao.definir_aptidao_individuo(1, 1.20)
    aptidao_str_2 = f"{populacao.obter_aptidao_individuo(1):.2f}"
    print(f"‚îÇ {pesos_str_2:<48} ‚îÇ{aptidao_str_2:>4} ‚îÇ")
    
    print("‚îî" + "‚îÄ" * 50 + "‚î¥" + "‚îÄ" * 5 + "‚îò")
    
    print(f"\nüìä DETALHES T√âCNICOS:")
    print(f"  ‚Ä¢ Cada linha = 1 indiv√≠duo (rede neural)")
    print(f"  ‚Ä¢ 180 pesos por indiv√≠duo organizados como:")
    print(f"    - W1 (9√ó9): posi√ß√µes 0-80   (81 pesos)")
    print(f"    - b1 (9):   posi√ß√µes 81-89  (9 bias)")
    print(f"    - W2 (9√ó9): posi√ß√µes 90-170 (81 pesos)")
    print(f"    - b2 (9):   posi√ß√µes 171-179 (9 bias)")
    print(f"  ‚Ä¢ Coluna 180: aptid√£o (quanto menor, melhor)")
    
    return populacao


def testar_propagacao_com_individuo():
    """Testa a propaga√ß√£o usando um indiv√≠duo da popula√ß√£o."""
    print("\n" + "=" * 70)
    print("üß† TESTE DE PROPAGA√á√ÉO COM INDIV√çDUO DA POPULA√á√ÉO")
    print("=" * 70)
    
    # Usar a popula√ß√£o criada anteriormente
    populacao = PopulacaoGenetica(tamanho_populacao=1)
    
    # Criar rede neural com os pesos do primeiro indiv√≠duo
    rede = populacao.criar_rede_neural(0)
    
    print(f"‚úÖ Rede neural criada com pesos do indiv√≠duo #1")
    print(f"   Total de par√¢metros: 180")
    
    # Exemplo de entrada (tabuleiro do jogo da velha)
    tabuleiro = np.array([1, 0, -1, 0, 0, 0, 1, -1, 0])
    print(f"\nüéÆ Testando com tabuleiro:")
    print(f"   Entrada: {tabuleiro}")
    print(f"   Formato visual:")
    print(f"     {tabuleiro[0]:2} | {tabuleiro[1]:2} | {tabuleiro[2]:2}")
    print(f"     -----------")  
    print(f"     {tabuleiro[3]:2} | {tabuleiro[4]:2} | {tabuleiro[5]:2}")
    print(f"     -----------")
    print(f"     {tabuleiro[6]:2} | {tabuleiro[7]:2} | {tabuleiro[8]:2}")
    
    # Executar propaga√ß√£o
    saidas = rede.propagacao(tabuleiro)
    jogada = rede.escolher_jogada(tabuleiro)
    
    print(f"\n‚ö° Resultado da propaga√ß√£o:")
    print(f"   Sa√≠das: {saidas}")
    print(f"   Jogada escolhida: posi√ß√£o {jogada}")
    
    # Mostrar detalhes da arquitetura
    print(f"\nüèóÔ∏è  ARQUITETURA DA REDE:")
    print(f"   Entrada: 9 neur√¥nios (posi√ß√µes do tabuleiro)")
    print(f"   Camada oculta: 9 neur√¥nios (ativa√ß√£o tanh)")
    print(f"   Camada sa√≠da: 9 neur√¥nios (ativa√ß√£o linear)")
    print(f"   Total conex√µes: 9√ó9 + 9√ó9 = 162 pesos + 18 bias = 180 par√¢metros")


def main():
    """Fun√ß√£o principal demonstrando todos os conceitos."""
    print("üéØ DEMONSTRA√á√ÉO COMPLETA DA REDE NEURAL + ALGORITMO GEN√âTICO")
    print("=" * 70)
    
    # 1. Mostrar estrutura da matriz
    matriz = mostrar_estrutura_matriz()
    
    # 2. Exemplo similar √† imagem
    populacao = demonstrar_exemplo_imagem()
    
    # 3. Teste de propaga√ß√£o
    testar_propagacao_com_individuo()
    
    print(f"\n‚úÖ RESUMO:")
    print(f"  ‚úì Matriz da popula√ß√£o criada: {matriz.shape}")
    print(f"  ‚úì Pesos aleat√≥rios entre -1 e 1: ‚úì")
    print(f"  ‚úì 180 pesos + 1 aptid√£o por indiv√≠duo: ‚úì")
    print(f"  ‚úì Rede neural MLP 9‚Üí9‚Üí9 implementada: ‚úì")
    print(f"  ‚úì Propaga√ß√£o forward funcionando: ‚úì")
    
    print(f"\nüöÄ A implementa√ß√£o est√° pronta para ser usada com algoritmo gen√©tico!")


if __name__ == "__main__":
    main() 